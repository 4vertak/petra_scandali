
SHELL := /bin/bash

PROJECT_NAME = maze

CC = gcc

OBJ_DIR = ./obj

LIB_DIR = ./backend

GUI_DIR= ./frontend

TEST_DIR = ./tests

REPORT_DIR = ./report

DVI_DIR = ./../docs

CFLAGS = -std=c++17 -Wall -Wextra -Werror -pedantic

LDGUI = -lncurses

GCOV_FLAGS = --coverage -lgtest -g 

CHECK_FLAGS = -lcheck -lpthread -ldl -pthread -lm -lrt -lsubunit -lgcov --coverage

VALGRIND_FLAGS = --tool=memcheck --leak-check=full

GCOVRFLAGS = --html --html-details --exclude-throw-branches -o $(REPORT_DIR)/report.html

HEADERS = $(shell find $(LIB_DIR) -type f -name "*.h") \
           $(shell find $(TEST_DIR) -type f -name "*.h") \
		   $(shell find $(GUI_DIR) -type f -name "*.h")

LIBRARY = $(PROJECT_NAME).a

TARGET = test

LIB_C = $(shell find $(LIB_DIR) -type f -name "*.c")
LIB_H = $(shell find $(LIB_DIR) -type f -name "*.h")
LIB_O = $(notdir $(LIB_C:%.c=%.o))

GUI_C = $(shell find $(GUI_DIR) -type f -name "*.c")
GUI_H = $(shell find $(GUI_DIR) -type f -name "*.h")
GUI_O = $(notdir $(GUI_C:%.c=%.o))

TEST_C = $(shell find $(TEST_DIR) -type f -name "*.c")
TEST_H = $(shell find $(TEST_DIR) -type f -name "*.h")
TEST_O = $(notdir $(TEST_C:%.c=%.o))

C_FILES = $(LIB_C) $(GUI_C) $(TEST_C)
H_FILES = $(LIB_H) $(GUI_H) $(TEST_H)
ALL_FILES = $(C_FILES) $(H_FILES)


vpath %.c $(shell find $(LIB_DIR) -type d) $(shell find $(TEST_DIR) -type d)
vpath %.o $(OBJ_DIR)

.PHONY: all clean rebuild test gcov_report dvi style leaks install-deps

all: clean style c_check dvi $(LIBRARY) gcov_report leaks

clean:
	@rm -rf *.o *.g* *.info *.a *.out $(REPORT_DIR)/*.a *.dSYM *.html *.css
	@rm -rf $(OBJ_DIR)
	@rm -rf $(REPORT_DIR)
	@rm -rf $(DVI_DIR)
	@printf "\033[1;33mClean-up completed.\n\033[0m"

rebuild: clean all

$(OBJ_DIR):
	@mkdir -p $(OBJ_DIR)

$(REPORT_DIR):
	@mkdir -p $(REPORT_DIR)

$(LIBRARY): $(OBJ_DIR) $(LIB_O) $(HEADERS)
	@ar rcs $@ $(LIB_O)
	@ranlib $@

$(OBJ_DIR)/%.o: %.c
	@$(CC) $(CCFLAGS) -c -o $@ __CODE_BLOCK_0__lt;

test: $(LIBRARY)
	@printf "\033[1;33mCompiling tests...\n\033[0m"
	@$(CC) $(CCFLAGS) $(TEST_C) $(LIBRARY) $(CHECK_FLAGS) -o $(addprefix $(OBJ_DIR)/,$(TARGET))
	@./$(addprefix $(OBJ_DIR)/,$(TARGET))
	@rm -rf *.gcda *.gcno

c_check:
	@printf "\033[1;33mRunning ccheck...\n\033[0m"
	@$(C_CHECK) $(LIB_C)
	@printf "\033[1;33mccheck completed.\n\033[0m"

gcov_report: $(LIBRARY) test $(REPORT_DIR)
	@$(CC) $(CCFLAGS) $(TEST_C) $(LIB_C) $(LIBRARY) $(CHECK_FLAGS) $(GCOV_FLAGS) -o $(addprefix $(OBJ_DIR)/, $(TARGET))
	@./$(addprefix $(OBJ_DIR)/,$(TARGET))
	@gcovr $(GCOVRFLAGS)
	@printf "\033[1;33mGCOV report created: $(REPORT_DIR)/report.html \n\033[0m"
	@rm -rf *.gcda *.gcno *.a *.o
#	xdg-open $(REPORT_DIR)/report.html

dvi:
	@rm -rf $(DVI_DIR)
	doxygen Doxyfile
#	xdg-open $(DVI_DIR)/html/index.html

style:
	@cp ../materials/linters/.clang-format .clang-format
	@printf "\033[1;33mRunning clang-format with Google style on all files...\n\033[0m"
	@clang-format -style=Google -n $(ALL_FILES)
	@printf "\033[1;33mChecking formatting without making changes completed.\n\033[0m"
#	@printf "\033[1;33mApplying clang-format with Google style to all files...\n\033[0m"
#	@clang-format -style=Google -i $(ALL_FILES)
#	@printf "\033[1;33mCode formatting with clang-format completed.\n\033[0m"
	@rm -f .clang-format

leaks: clean $(TARGET)
	valgrind --tool=memcheck --leak-check=full -s $(addprefix $(OBJ_DIR)/,$(TARGET))
	@rm -rf *.gcda *.gcno *.a *.o

install-deps:
	sudo apt update
	sudo apt install -y clang-format ccheck doxygen libgtest-dev
